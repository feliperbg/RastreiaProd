<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Componentes</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    
    <style>
        @media (max-width: 768px) {
            .table-responsive {
                border: 0;
            }
            .table-responsive thead {
                display: none;
            }

            .table-responsive tr {
                display: block;
                margin-bottom: 1rem;
                border: 1px solid #dee2e6;
            }

            .table-responsive td {
                display: block;
                text-align: right;
                border-bottom: 1px solid #dee2e6;
            }

            .table-responsive td::before {
                content: attr(data-label);
                float: left;
                font-weight: bold;
            }

            .table-responsive td:last-child {
                border-bottom: 0;
                text-align: center;
            }
        }
    </style>
</head>
<body>
      <!-- Header -->
      <%- include('partials/header.ejs') %>

    <div class="container mt-4">
        <h1 class="mb-4 text-center">Componentes</h1>
        
        <div class="card mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <input type="text" id="filtro" class="form-control" placeholder="Pesquisar componente...">
                    </div>
                    <div class="col-md-6 text-end">
                        <button class="btn btn-primary" onclick="window.location.href='/componente/adicionar-componente'">
                            <i class="bi bi-plus-circle"></i> Adicionar Componente
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-striped table-hover table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>Nome</th>
                        <th>Código</th>
                        <th>Descrição</th>
                        <th class="text-nowrap small" style="min-width: 100px;">Data Entrada</th>
                        <th>Validade</th>
                        <th>Quantidade</th>
                        <th class="text-nowrap small" style="min-width: 100px;">Preço Lote</th>
                        <th class="text-nowrap small" style="min-width: 100px;">Preço Unidade</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody id="tabela-componentes">
                    <tr>
                        <td colspan="9">Carregando dados...</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <script> 

        function formatarData(data) {
            if (!data) return '';
            return new Date(data).toLocaleDateString('pt-BR');
        }

        async function carregarComponentes() {
            try {
                showLoading();
                
                const response = await fetch('/componente/readALL', {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });
                if (!response.ok) {
                    throw new Error(`Erro HTTP: ${response.status}`);
                }
                
                const dados = await response.json();
                const tabela = document.getElementById("tabela-componentes");
                
                const componentes = Array.isArray(dados) ? dados : dados.componentes || [];
                if (!Array.isArray(componentes)) {
                    throw new Error("Resposta da API não é uma lista de componentes.");
                }
                if (componentes.length === 0) {
                    tabela.innerHTML = `<tr><td colspan="12">Nenhum produto encontrado.</td></tr>`;
                    return;
                }
                tabela.innerHTML = "";
                componentes.forEach(comp => {
                    const tr = document.createElement("tr");
                    tr.innerHTML = `
                        <td data-label="Nome">${comp.nome}</td>
                        <td data-label="Código">${comp.codigo}</td>
                        <td data-label="Descrição">${comp.descricao}</td>
                        <td data-label="Data Entrada">${formatarData(comp.dataEntrada)}</td>
                        <td data-label="Validade">${formatarData(comp.validade)}</td>
                        <td data-label="Quantidade">${comp.quantidade}</td>
                        <td data-label="Preço Lote">R$ ${comp.precoPagoLote.toFixed(2)}</td>
                        <td data-label="Preço Unidade">R$ ${comp.precoUnidade.toFixed(2)}</td>
                        <td data-label="Ações">
                                <button class="btn btn-sm btn-primary mb-1" onclick="editarComponente('${comp._id}')">
                                    <i class="bi bi-pencil"></i> Editar
                                </button>
                                <button class="btn btn-sm btn-danger mb-1" onclick="deletarComponente('${comp._id}')">
                                    <i class="bi bi-trash"></i> Deletar
                                </button>
                        </td>
                    `;
                    tbody.appendChild(tr);
                });
            } catch (err) {
                console.error(err);
                Swal.fire('Erro!', 'Não foi possível carregar os componentes.', 'error');
            } finally {
                hideLoading()
            }
        }
        function showLoading() {
            Swal.fire({
                title: 'Carregando...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading()
                }
            });
        }
         // Função para fechar loading
         function hideLoading() {
            Swal.close();
        }

        function editarComponente(id) {
            Swal.fire({
                title: 'Editar Componente',
                text: `Deseja editar o componente com ID: ${id}?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Sim, editar',
                cancelButtonText: 'Cancelar'
            }).then(result => {
                if (result.isConfirmed) {
                    // Recupera o token do localStorage
                    const token = localStorage.getItem('authToken');
                    
                    // Verifica se o token existe
                    if (token) {
                        // Se o token existir, faz a requisição com o token
                        fetch(`/componente/editar-componente/${id}`, {
                            method: 'GET',  // ou 'POST', dependendo da sua rota
                            headers: {
                                'Authorization': `Bearer ${token}`
                            }
                        })
                        .then(response => response.json())
                        .then(data => {
                            // Exemplo: redirecionar para a página de edição
                            window.location.href = `/componente/editar-componente?id=${id}`;
                        })
                        .catch(error => {
                            console.error('Erro ao editar o componente:', error);
                            Swal.fire('Erro!', 'Não foi possível editar o componente.', 'error');
                        });
                    } else {
                        Swal.fire('Erro!', 'Você não está autenticado. Faça login novamente.', 'error');
                    }
                }
            });
        }


        async function deletarComponente(id) {
            const { isConfirmed } = await Swal.fire({
                title: 'Confirmar Exclusão',
                text: "Tem certeza que deseja deletar este componente?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sim, deletar',
                cancelButtonText: 'Cancelar'
            });

            if (isConfirmed) {
                try {
                    Swal.fire({ title: 'Deletando...', allowOutsideClick: false, didOpen: () => Swal.showLoading() });
                    const response = await fetch(`/componente/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                        }
                    });

                    if (!response.ok) throw new Error("Erro ao deletar");

                    Swal.fire('Deletado!', 'Componente removido com sucesso.', 'success');
                    carregarComponentes();
                } catch (error) {
                    console.error(error);
                    Swal.fire('Erro!', 'Não foi possível deletar o componente.', 'error');
                } finally {
                    hideLoading()
                }
            }
        }

        document.getElementById("filtro").addEventListener("input", function () {
            const termo = this.value.toLowerCase();
            document.querySelectorAll("#tabela-componentes tr").forEach(tr => {
                tr.style.display = tr.innerText.toLowerCase().includes(termo) ? "" : "none";
            });
        });

        document.addEventListener('DOMContentLoaded', carregarComponentes);
    </script>
</body>
</html>
