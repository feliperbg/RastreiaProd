<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Etapas</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="/css/adminlte.css">
    <style>
        /* Estilos para centralizar o conteúdo da tabela */
        .table td, .table th {
            text-align: center;
            vertical-align: middle;
        }
        
        /* Ajuste para a coluna de ações */
        .table td[data-label="Ações"] {
            white-space: nowrap;
        }
        
        /* Estilos responsivos */
        @media (max-width: 768px) {
            .table-responsive {
                border: 0;
            }
            
            .table-responsive thead {
                display: none;
            }
            
            .table-responsive tr {
                display: block;
                margin-bottom: 1rem;
                border: 1px solid #dee2e6;
            }
            
            .table-responsive td {
                display: block;
                text-align: right;
                border-bottom: 1px solid #dee2e6;
            }
            
            .table-responsive td::before {
                content: attr(data-label);
                float: left;
                font-weight: bold;
            }
            
            .table-responsive td:last-child {
                border-bottom: 0;
                text-align: center;
            }
        }
    </style>
</head>
  <body class="layout-fixed sidebar-expand-lg bg-body-tertiary">
    <div class="app-wrapper">
        <%- include('partials/header.ejs') %>
        <%- include('partials/sidebar.ejs') %>
            <main class="app-main">
                <div class="app-content">
                    <div class="container-fluid">
                <h1 class="mb-4 text-center">Etapas</h1>    
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <input type="text" id="filtro" class="form-control" placeholder="Pesquisar etapa...">
                            </div>
                            <div class="col-md-6 text-end">
                                <button class="btn btn-primary" onclick="window.location.href='/etapa/adicionar-etapa'">
                                    <i class="bi bi-plus-circle"></i> Adicionar Etapa
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="table-responsive">
                    <table class="table table-striped table-hover table-bordered">
                        <thead class="table-dark">
                            <tr>
                                <th>Nome</th>
                                <th>Sequências</th>
                                <th>Departamento Responsável</th>
                                <th>Procedimentos</th>
                                <th>Componente Conclusão</th>
                                <th>Funcionários Responsáveis</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody id="tabela-etapas">
                            <tr>
                                <td colspan="7">Carregando dados...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="/js/adminlte.js"></script>

    <script>
        // Função para formatar a data no formato dd/mm/yyyy
        function formatarSequencias(sequencias) {
            if (!Array.isArray(sequencias)) return '';
            return sequencias.join(', ');
        }
        
        // Função para formatar os procedimentos
        function formatarProcedimentos(procedimentos) {
            if (!Array.isArray(procedimentos)) return '';
            return procedimentos.join(', ');
        }

        // Função para formatar os componentes de conclusão
        function formatarComponentes(componentes) {
            if (!Array.isArray(componentes)) return '';
            // Exibe cada ID no formato ID - <ID>
            return componentes.map(id => `${id} - <${id}>`).join('<br>');
        }

        // Função para formatar os funcionários responsáveis
        function formatarFuncionarios(funcionarios) {
            if (!Array.isArray(funcionarios)) return '';
            // Exibe cada ID no formato ID - <ID>
            return funcionarios.map(id => `${id} - <${id}>`).join('<br>');
        }
        
        // Função para mostrar loading
        function showLoading() {
            Swal.fire({
                title: 'Carregando...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading()
                }
            });
        }
        
        // Função para fechar loading
        function hideLoading() {
            Swal.close();
        }
        
        async function carregarTabela() {
            try {
                showLoading();
            
                const response = await fetch('/etapa/readALL', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    },
                });
            
                if (!response.ok) {
                    throw new Error(`Erro HTTP: ${response.status}`);
                }
            
                const resultado = await response.json();
                const tabela = document.getElementById("tabela-etapas");
                console.log('Dados recebidos:', resultado);
                
                const etapas = Array.isArray(resultado) ? resultado : resultado.etapas;
                
                if (!Array.isArray(etapas)) {
                    throw new Error("Resposta da API não é uma lista de etapas.");
                }
                if (etapas.length === 0) {
                    tabela.innerHTML = `<tr><td colspan="7">Nenhuma etapa encontrada.</td></tr>`;
                    return;
                }
                tabela.innerHTML = ""; // Limpa tabela após carregamento

                etapas.forEach(etapa => {
                    const tr = document.createElement("tr");
                    console.log('Dados da etapa:', etapa);
                    tr.innerHTML = `
                        <td data-label="Nome">${etapa.nome}</td>
                        <td data-label="Sequências">${formatarSequencias(etapa.sequencias)}</td>
                        <td data-label="Departamento Responsável">${etapa.departamentoResponsavel}</td>
                        <td data-label="Procedimentos">${formatarProcedimentos(etapa.procedimentos)}</td>
                        <td data-label="Componente Conclusão">${formatarComponentes(etapa.componenteConclusao)}</td>
                        <td data-label="Funcionários Responsáveis">${formatarFuncionarios(etapa.funcionariosResponsaveis)}</td>
                        <td data-label="Ações">
                            <button class="btn btn-sm btn-primary mb-1" onclick="editarEtapa('${etapa._id}')">
                                <i class="bi bi-pencil"></i> Editar
                            </button>
                            <button class="btn btn-sm btn-danger mb-1" onclick="deletarEtapa('${etapa._id}')">
                                <i class="bi bi-trash"></i> Deletar
                            </button>
                        </td>
                    `;
                    tabela.appendChild(tr);
                });
            
            } catch (error) {
                console.error('Falha ao buscar etapas:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Erro ao carregar',
                    text: 'Ocorreu um erro ao carregar as etapas. Por favor, tente novamente.',
                    confirmButtonText: 'Ok'
                });
            } finally {
                hideLoading();
            }
        }
        
        function editarEtapa(id) {
            Swal.fire({
                title: 'Editar Etapa',
                text: `Você deseja editar a etapa com ID: ${id}?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Sim, editar',
                cancelButtonText: 'Cancelar'
            }).then(result => {
                if (result.isConfirmed) {
                    window.location.href = `/etapa/editar-etapa/${id}`;
                }
            });
        }

        async function deletarEtapa(id) {
            const { isConfirmed } = await Swal.fire({
                title: 'Tem certeza?',
                text: "Você não poderá reverter isso!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Sim, deletar!',
                cancelButtonText: 'Cancelar'
            });
            
            if (isConfirmed) {
                try {
                    showLoading();
                    const response = await fetch(`/etapa/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                        }
                    });
            
                    if (response.ok) {
                        await Swal.fire(
                            'Deletado!',
                            'A etapa foi deletada com sucesso.',
                            'success'
                        );
                        carregarTabela(); // Recarrega a tabela após exclusão
                    } else {
                        throw new Error("Falha ao excluir etapa");
                    }
                } catch (error) {
                    console.error("Erro ao excluir etapa:", error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Erro ao deletar',
                        text: 'Ocorreu um erro ao tentar deletar a etapa. Por favor, tente novamente.',
                        confirmButtonText: 'Ok'
                    });
                } finally {
                    hideLoading();
                }
            }
        }

        // Carregar a tabela ao carregar a página
        document.addEventListener("DOMContentLoaded", function() {
            carregarTabela();
        });

        // Filtro de busca por nome
        document.getElementById("filtro").addEventListener("input", function() {
            const filtro = this.value.toLowerCase();
            const linhas = document.querySelectorAll("#tabela-etapas tr");
            linhas.forEach(linha => {
                const nome = linha.cells[0]?.innerText.toLowerCase();
                if (nome && nome.includes(filtro)) {
                    linha.style.display = "";
                } else {
                    linha.style.display = "none";
                }
            });
        });
    </script>
</html>
