<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Produtos</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" />
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" />
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="css/adminlte.css" />
    <style>
        /* Estilos para centralizar o conteúdo da tabela */
        .table td, .table th {
            text-align: center;
            vertical-align: middle;
        }
        
        /* Ajuste para a coluna de ações */
        .table td[data-label="Ações"] {
            white-space: nowrap;
        }
        
        /* Estilos responsivos */
        @media (max-width: 768px) {
            .table-responsive {
                border: 0;
            }
            
            .table-responsive thead {
                display: none;
            }
            
            .table-responsive tr {
                display: block;
                margin-bottom: 1rem;
                border: 1px solid #dee2e6;
            }
            
            .table-responsive td {
                display: block;
                text-align: right;
                border-bottom: 1px solid #dee2e6;
            }
            
            .table-responsive td::before {
                content: attr(data-label);
                float: left;
                font-weight: bold;
            }
            
            .table-responsive td:last-child {
                border-bottom: 0;
                text-align: center;
            }
        }
    </style>
</head>
<body class="layout-fixed sidebar-expand-lg bg-body-tertiary">
    <div class="app-wrapper">
        <%- include('partials/header.ejs') %>
        <%- include('partials/sidebar.ejs') %>
            <main class="app-main">
                <div class="app-content">
                    <div class="container-fluid">
                      <h1 class="mb-4 text-center">Produtos</h1>    
                      <div class="card mb-4">
                          <div class="card-body">
                              <div class="row">
                                  <div class="col-md-6">
                                      <input type="text" id="filtro" class="form-control" placeholder="Pesquisar produto...">
                                  </div>
                                  <div class="col-md-6 text-end">
                                      <a href="/produto/adicionar-produto" class="btn btn-primary">
                                          <i class="bi bi-plus-circle"></i> Adicionar Novo Produto
                                      </a>
                                  </div>
                              </div>
                          </div>
                      </div>
                      
                      <div class="table-responsive">
                          <table class="table table-striped table-hover table-bordered">
                              <thead class="table-dark">
                                <tr>
                                  <th>Nome</th>
                                  <th>Código</th>
                                  <th>Descrição</th>
                                  <th>Componentes Necessários</th>
                                  <th>Data Entrada</th>
                                  <th>Data Validade</th>
                                  <th>Preços</th>
                                  <th>Dimensões Produto</th>
                                  <th>Quantidade</th>
                                  <th>Etapas</th>
                                  <th>Ações</th>
                                </tr>
                              </thead>
                              <tbody id="tabela-produtos">
                                  <tr>
                                      <td colspan="12">Carregando dados...</td>
                                  </tr>
                              </tbody>
                          </table>
                      </div>
                  </div>
                </div>
              </main>
    </div>
</body>
            <!-- Bootstrap JS Bundle with Popper -->
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
            <!-- SweetAlert2 JS -->
            <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
            <script src="/js/adminlte.js"></script>
  <script>
    async function obterNomeComponente(id) {
      try {
        const resposta = await fetch(`/componente/${id}`, {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });

        if (!resposta.ok) throw new Error('Erro ao buscar componente');
        const dados = await resposta.json();
;
        return dados.componente.codigo || "Desconhecido";
      } catch (e) {
        console.error(`Erro ao buscar componente ${id}:`, e);
        return "Erro";
      }
  }

  async function carregarTabelaProdutos() {
    try {
      const resposta = await fetch('/produto/readALL', {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`
        }
      });

      if (!resposta.ok) throw new Error("Erro ao carregar produtos");

      const dados = await resposta.json();
      const tabela = document.getElementById("tabela-produtos");
      tabela.innerHTML = "";

      const produtos = Array.isArray(dados) ? dados : dados.produtos || [];
      if (!Array.isArray(produtos)) {
        throw new Error("Resposta da API não é uma lista de produtos.");
      }

      if (produtos.length === 0) {
        tabela.innerHTML = `<tr><td colspan="12">Nenhum produto encontrado.</td></tr>`;
        return;
      }

      for (const prod of produtos) {
        const nomesComponentes = await Promise.all(
          (prod.componentesNecessarios || []).map(obterNomeComponente)
        );
      
        const modalIdDesc = `modal-desc-${prod._id}`;
        const modalIdDim = `modal-dim-${prod._id}`;
        const modalIdEtapas = `modal-etapas-${prod._id}`;

        const componentesInfo = (prod.componentesNecessarios || [])
          .map((comp, idx) => {
            // Se nomesComponentes[idx] não existir, mostra "Desconhecido"
            return `${nomesComponentes[idx] || "Desconhecido"} - <${comp}>`;
          })
          .join("<br>");
        console.log(`Componentes para o produto ${prod.nome}:`, componentesInfo);
        console.log(prod);
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td data-label="Nome">${prod.nome}</td>
          <td data-label="Código">${prod.codigo}</td>
          <td data-label="Descrição">
            <button class="btn btn-sm btn-outline-primary" onclick="verDescricao('${escapeHtml(prod.descricao || '')}')" title="Ver descrição">
              <i class="bi bi-file-earmark-text"></i>
            </button>
          </td>
          <td data-label="Componentes Necessários">
            <button class="btn btn-sm btn-outline-secondary" onclick="verComponentes(\`${componentesInfo}\`)" title="Ver componentes">
              <i class="bi bi-puzzle"></i>
            </button>
          </td>
          <td data-label="Data Entrada">${new Date(prod.dataEntrada).toLocaleDateString("pt-BR")}</td>
          <td data-label="Data dataValidade">${new Date(prod.dataValidade).toLocaleDateString("pt-BR")}</td>
          <td data-label="Preços">
            <button class="btn btn-sm btn-outline-success" onclick="verPrecos('${prod.precoMontagem.toFixed(2)}','${prod.precoVenda.toFixed(2)}')" title="Ver preços">
              <i class="bi bi-currency-dollar"></i>
            </button>
          </td>
          <td data-label="Dimensões">
            <button class="btn btn-sm btn-outline-warning" onclick="verDimensoes('${prod.dimensoes.comprimento}','${prod.dimensoes.largura}','${prod.dimensoes.altura}')" title="Ver dimensões">
              <i class="bi bi-rulers"></i>
            </button>
          </td>
          <td data-label="Quantidade">${prod.quantidade}</td>
          <td data-label="Etapas">
            <button class="btn btn-sm btn-outline-info" onclick="verEtapas('${escapeHtml((prod.etapas || []).join('<br>'))}')" title="Ver etapas">
              <i class="bi bi-list-check"></i>
            </button>
          </td>
          <td data-label="Ações">
            <button class="btn btn-sm btn-primary mb-1" onclick="editarProduto('${prod._id}', '${prod.codigo}')">
              <i class="bi bi-pencil"></i>
            </button>
            <button class="btn btn-sm btn-danger mb-1" onclick="deletarProduto('${prod._id}')">
              <i class="bi bi-trash"></i>
            </button>
          </td>
        `;
        tabela.appendChild(tr);
      }
    } catch (erro) {
      console.error(erro);
      Swal.fire('Erro!', 'Não foi possível carregar os produtos.', 'error');
    }
  }



      function editarProduto(id, codigo) {
        Swal.fire({
            title: 'Editar Produto',
            text: `Você deseja editar o produto com o código: ${codigo}?`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Sim, editar',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = `/produto/editar-produto/${id}`;
            }
        });
    }

  async function deletarProduto(id) {
      const { isConfirmed } = await Swal.fire({
          title: 'Confirmar Exclusão',
          text: "Tem certeza que deseja deletar este produto?",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Sim, deletar',
          cancelButtonText: 'Cancelar'
      });

      if (isConfirmed) {
          try {
              Swal.fire({ title: 'Deletando...', allowOutsideClick: false, didOpen: () => Swal.showLoading() });
              const response = await fetch(`/produto/${id}`, {
                  method: 'DELETE',
                  headers: {
                      'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                  }
              });

              if (!response.ok) throw new Error("Erro ao deletar");

              Swal.fire('Deletado!', 'Produto removido com sucesso.', 'success');
              carregarTabelaProdutos();
          } catch (error) {
              console.error(error);
              Swal.fire('Erro!', 'Não foi possível deletar o produto.', 'error');
          } finally {
              hideLoading();
          }
      }
  }


    function escapeHtml(text) {
      return text
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    }

    function verDescricao(descricao) {
      Swal.fire({
        title: 'Descrição',
        html: descricao ? `<ul style="text-align:left"><li>${descricao}</li></ul>` : '<i>Sem descrição.</i>',
        confirmButtonText: 'Fechar'
      });
    }

    function verDimensoes(comprimento, largura, altura) {
      Swal.fire({
        title: 'Dimensões',
        html: `<ul style="text-align:left">
      <li><strong>Comprimento:</strong> ${comprimento}</li>
      <li><strong>Largura:</strong> ${largura}</li>
      <li><strong>Altura:</strong> ${altura}</li>
    </ul>`,
        confirmButtonText: 'Fechar'
      });
    }

    function verEtapas(etapasHtml) {
      Swal.fire({
        title: 'Etapas',
        html: etapasHtml
          ? `<ul style="text-align:left">${etapasHtml.split('<br>').map(e => `<li>${e}</li>`).join('')}</ul>`
          : '<i>Sem etapas.</i>',
        confirmButtonText: 'Fechar'
      });
    }

    function verPrecos(precoMontagem, precoVenda) {
      Swal.fire({
        title: 'Preços',
        html: `<ul style="text-align:left">
      <li><strong>Preço de Montagem:</strong> R$ ${precoMontagem}</li>
      <li><strong>Preço de Venda:</strong> R$ ${precoVenda}</li>
    </ul>`,
        confirmButtonText: 'Fechar'
      });
    }

    function verComponentes(componentesHtml) {
      Swal.fire({
        title: 'Componentes Necessários',
        html: componentesHtml
          ? `<ul style="text-align:left">${componentesHtml.split('<br>').map(e => `<li>${e}</li>`).join('')}</ul>`
          : '<i>Sem componentes.</i>',
        confirmButtonText: 'Fechar'
      });
    }

    // Filtro dinâmico
    document.getElementById("filtro").addEventListener("input", function () {
      const termo = this.value.toLowerCase();
      const linhas = document.querySelectorAll("#tabela-produtos tr");

      linhas.forEach(tr => {
        const texto = tr.textContent.toLowerCase();
        tr.style.display = texto.includes(termo) ? "" : "none";
      });
    });

    // Inicialização
    carregarTabelaProdutos();
  </script>

</body>
</html>
